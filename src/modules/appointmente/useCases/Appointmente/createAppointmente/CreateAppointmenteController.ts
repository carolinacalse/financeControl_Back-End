import {Request, Response} from "express";
import { CreateAppointmenteUseCase } from "./CreateAppointmenteUseCase";
import {container} from "tsyringe"

class CreateAppointmenteController {

  async handle(request: Request, response: Response): Promise<Response> {
    const {
      docNum,
      status,
      op ,
      nota ,
      bch ,
      feedstock ,
      partNumber,
      client,
      address,
      descriptionInspection,
      firstInspection,
      quantityTotal,
      quantityApproved,
      quantityRejected,
      provider,
      inactive,
      create_user,
      problemDescription,
      defectClassification,
      causativeProcess,
      defectType ,
      detectedSpot,
      quantityDefect,
      indicator,
      program,
      responsibleOperator,
      shift,
      potentialCause,
      obsPotentialCause,
      actionAccept,
      actionRework,
      actionScrap,
      indicatorScrap,
      detour,
      note,
      scrapDate,
      unitaryValue,
      amount,
      unitWeight,
      totalWeight,
      rncTerminated,
      inherentDefect,
      workInstruction,
      properWorkInstruction,
      operatorFollowedInstruction,
      trainedOperator,
      machineProblem,
      tooling,
      id_file,
      disposition} = request.body;

    const createAppointmenteUseCase = container.resolve(CreateAppointmenteUseCase);

    const create = await createAppointmenteUseCase.execute({
      docNum,
      status,
      create_user,
      op,
      nota,
      bch,
      feedstock,
      partNumber,
      client,
      address,
      descriptionInspection,
      firstInspection,
      quantityTotal,
      quantityApproved,
      quantityRejected,
      provider,
      inactive,
      problemDescription,
      defectClassification,
      causativeProcess,
      defectType ,
      detectedSpot,
      quantityDefect,
      indicator,
      program,
      responsibleOperator,
      shift,
      potentialCause,
      obsPotentialCause,
      actionAccept,
      actionRework,
      actionScrap,
      indicatorScrap,
      detour,
      note,
      scrapDate,
      unitaryValue,
      amount,
      unitWeight,
      totalWeight,
      rncTerminated,
      inherentDefect,
      workInstruction,
      properWorkInstruction,
      operatorFollowedInstruction,
      trainedOperator,
      machineProblem,
      tooling,
      id_file,
      disposition})
    return response.status(201).json({create});
  }
}
 export {CreateAppointmenteController}
